# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Mushroom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class=None, cap_shape=None, cap_surface=None, cap_color=None, bruises=None, odor=None, gill_attachment=None, gill_spacing=None, gill_size=None, gill_color=None, stalk_shape=None, stalk_root=None, stalk_surface_above_ring=None, stalk_surface_below_ring=None, stalk_color_above_ring=None, stalk_color_below_ring=None, veil_type=None, veil_color=None, ring_number=None, ring_type=None, spore_print_color=None, population=None, habitat=None):  # noqa: E501
        """Mushroom - a model defined in OpenAPI

        :param _class: The _class of this Mushroom.  # noqa: E501
        :type _class: str
        :param cap_shape: The cap_shape of this Mushroom.  # noqa: E501
        :type cap_shape: str
        :param cap_surface: The cap_surface of this Mushroom.  # noqa: E501
        :type cap_surface: str
        :param cap_color: The cap_color of this Mushroom.  # noqa: E501
        :type cap_color: str
        :param bruises: The bruises of this Mushroom.  # noqa: E501
        :type bruises: str
        :param odor: The odor of this Mushroom.  # noqa: E501
        :type odor: str
        :param gill_attachment: The gill_attachment of this Mushroom.  # noqa: E501
        :type gill_attachment: str
        :param gill_spacing: The gill_spacing of this Mushroom.  # noqa: E501
        :type gill_spacing: str
        :param gill_size: The gill_size of this Mushroom.  # noqa: E501
        :type gill_size: str
        :param gill_color: The gill_color of this Mushroom.  # noqa: E501
        :type gill_color: str
        :param stalk_shape: The stalk_shape of this Mushroom.  # noqa: E501
        :type stalk_shape: str
        :param stalk_root: The stalk_root of this Mushroom.  # noqa: E501
        :type stalk_root: str
        :param stalk_surface_above_ring: The stalk_surface_above_ring of this Mushroom.  # noqa: E501
        :type stalk_surface_above_ring: str
        :param stalk_surface_below_ring: The stalk_surface_below_ring of this Mushroom.  # noqa: E501
        :type stalk_surface_below_ring: str
        :param stalk_color_above_ring: The stalk_color_above_ring of this Mushroom.  # noqa: E501
        :type stalk_color_above_ring: str
        :param stalk_color_below_ring: The stalk_color_below_ring of this Mushroom.  # noqa: E501
        :type stalk_color_below_ring: str
        :param veil_type: The veil_type of this Mushroom.  # noqa: E501
        :type veil_type: str
        :param veil_color: The veil_color of this Mushroom.  # noqa: E501
        :type veil_color: str
        :param ring_number: The ring_number of this Mushroom.  # noqa: E501
        :type ring_number: str
        :param ring_type: The ring_type of this Mushroom.  # noqa: E501
        :type ring_type: str
        :param spore_print_color: The spore_print_color of this Mushroom.  # noqa: E501
        :type spore_print_color: str
        :param population: The population of this Mushroom.  # noqa: E501
        :type population: str
        :param habitat: The habitat of this Mushroom.  # noqa: E501
        :type habitat: str
        """
        self.openapi_types = {
            '_class': str,
            'cap_shape': str,
            'cap_surface': str,
            'cap_color': str,
            'bruises': str,
            'odor': str,
            'gill_attachment': str,
            'gill_spacing': str,
            'gill_size': str,
            'gill_color': str,
            'stalk_shape': str,
            'stalk_root': str,
            'stalk_surface_above_ring': str,
            'stalk_surface_below_ring': str,
            'stalk_color_above_ring': str,
            'stalk_color_below_ring': str,
            'veil_type': str,
            'veil_color': str,
            'ring_number': str,
            'ring_type': str,
            'spore_print_color': str,
            'population': str,
            'habitat': str
        }

        self.attribute_map = {
            '_class': 'class',
            'cap_shape': 'cap-shape',
            'cap_surface': 'cap-surface',
            'cap_color': 'cap-color',
            'bruises': 'bruises',
            'odor': 'odor',
            'gill_attachment': 'gill-attachment',
            'gill_spacing': 'gill-spacing',
            'gill_size': 'gill-size',
            'gill_color': 'gill-color',
            'stalk_shape': 'stalk-shape',
            'stalk_root': 'stalk-root',
            'stalk_surface_above_ring': 'stalk-surface-above-ring',
            'stalk_surface_below_ring': 'stalk-surface-below-ring',
            'stalk_color_above_ring': 'stalk-color-above-ring',
            'stalk_color_below_ring': 'stalk-color-below-ring',
            'veil_type': 'veil-type',
            'veil_color': 'veil-color',
            'ring_number': 'ring-number',
            'ring_type': 'ring-type',
            'spore_print_color': 'spore-print-color',
            'population': 'population',
            'habitat': 'habitat'
        }

        self.__class = _class
        self._cap_shape = cap_shape
        self._cap_surface = cap_surface
        self._cap_color = cap_color
        self._bruises = bruises
        self._odor = odor
        self._gill_attachment = gill_attachment
        self._gill_spacing = gill_spacing
        self._gill_size = gill_size
        self._gill_color = gill_color
        self._stalk_shape = stalk_shape
        self._stalk_root = stalk_root
        self._stalk_surface_above_ring = stalk_surface_above_ring
        self._stalk_surface_below_ring = stalk_surface_below_ring
        self._stalk_color_above_ring = stalk_color_above_ring
        self._stalk_color_below_ring = stalk_color_below_ring
        self._veil_type = veil_type
        self._veil_color = veil_color
        self._ring_number = ring_number
        self._ring_type = ring_type
        self._spore_print_color = spore_print_color
        self._population = population
        self._habitat = habitat

    @classmethod
    def from_dict(cls, dikt) -> 'Mushroom':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mushroom of this Mushroom.  # noqa: E501
        :rtype: Mushroom
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this Mushroom.


        :return: The _class of this Mushroom.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Mushroom.


        :param _class: The _class of this Mushroom.
        :type _class: str
        """
        allowed_values = ["e", "p"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def cap_shape(self):
        """Gets the cap_shape of this Mushroom.


        :return: The cap_shape of this Mushroom.
        :rtype: str
        """
        return self._cap_shape

    @cap_shape.setter
    def cap_shape(self, cap_shape):
        """Sets the cap_shape of this Mushroom.


        :param cap_shape: The cap_shape of this Mushroom.
        :type cap_shape: str
        """
        allowed_values = ["b", "c", "x", "f", "k", "s"]  # noqa: E501
        if cap_shape not in allowed_values:
            raise ValueError(
                "Invalid value for `cap_shape` ({0}), must be one of {1}"
                .format(cap_shape, allowed_values)
            )

        self._cap_shape = cap_shape

    @property
    def cap_surface(self):
        """Gets the cap_surface of this Mushroom.


        :return: The cap_surface of this Mushroom.
        :rtype: str
        """
        return self._cap_surface

    @cap_surface.setter
    def cap_surface(self, cap_surface):
        """Sets the cap_surface of this Mushroom.


        :param cap_surface: The cap_surface of this Mushroom.
        :type cap_surface: str
        """
        allowed_values = ["f", "g", "y", "s"]  # noqa: E501
        if cap_surface not in allowed_values:
            raise ValueError(
                "Invalid value for `cap_surface` ({0}), must be one of {1}"
                .format(cap_surface, allowed_values)
            )

        self._cap_surface = cap_surface

    @property
    def cap_color(self):
        """Gets the cap_color of this Mushroom.


        :return: The cap_color of this Mushroom.
        :rtype: str
        """
        return self._cap_color

    @cap_color.setter
    def cap_color(self, cap_color):
        """Sets the cap_color of this Mushroom.


        :param cap_color: The cap_color of this Mushroom.
        :type cap_color: str
        """
        allowed_values = ["n", "b", "c", "g", "r", "p", "u", "e", "w", "y"]  # noqa: E501
        if cap_color not in allowed_values:
            raise ValueError(
                "Invalid value for `cap_color` ({0}), must be one of {1}"
                .format(cap_color, allowed_values)
            )

        self._cap_color = cap_color

    @property
    def bruises(self):
        """Gets the bruises of this Mushroom.


        :return: The bruises of this Mushroom.
        :rtype: str
        """
        return self._bruises

    @bruises.setter
    def bruises(self, bruises):
        """Sets the bruises of this Mushroom.


        :param bruises: The bruises of this Mushroom.
        :type bruises: str
        """
        allowed_values = ["t", "f"]  # noqa: E501
        if bruises not in allowed_values:
            raise ValueError(
                "Invalid value for `bruises` ({0}), must be one of {1}"
                .format(bruises, allowed_values)
            )

        self._bruises = bruises

    @property
    def odor(self):
        """Gets the odor of this Mushroom.


        :return: The odor of this Mushroom.
        :rtype: str
        """
        return self._odor

    @odor.setter
    def odor(self, odor):
        """Sets the odor of this Mushroom.


        :param odor: The odor of this Mushroom.
        :type odor: str
        """
        allowed_values = ["a", "l", "c", "y", "f", "m", "n", "p", "s"]  # noqa: E501
        if odor not in allowed_values:
            raise ValueError(
                "Invalid value for `odor` ({0}), must be one of {1}"
                .format(odor, allowed_values)
            )

        self._odor = odor

    @property
    def gill_attachment(self):
        """Gets the gill_attachment of this Mushroom.


        :return: The gill_attachment of this Mushroom.
        :rtype: str
        """
        return self._gill_attachment

    @gill_attachment.setter
    def gill_attachment(self, gill_attachment):
        """Sets the gill_attachment of this Mushroom.


        :param gill_attachment: The gill_attachment of this Mushroom.
        :type gill_attachment: str
        """
        allowed_values = ["a", "d", "f", "n"]  # noqa: E501
        if gill_attachment not in allowed_values:
            raise ValueError(
                "Invalid value for `gill_attachment` ({0}), must be one of {1}"
                .format(gill_attachment, allowed_values)
            )

        self._gill_attachment = gill_attachment

    @property
    def gill_spacing(self):
        """Gets the gill_spacing of this Mushroom.


        :return: The gill_spacing of this Mushroom.
        :rtype: str
        """
        return self._gill_spacing

    @gill_spacing.setter
    def gill_spacing(self, gill_spacing):
        """Sets the gill_spacing of this Mushroom.


        :param gill_spacing: The gill_spacing of this Mushroom.
        :type gill_spacing: str
        """
        allowed_values = ["c", "w", "d"]  # noqa: E501
        if gill_spacing not in allowed_values:
            raise ValueError(
                "Invalid value for `gill_spacing` ({0}), must be one of {1}"
                .format(gill_spacing, allowed_values)
            )

        self._gill_spacing = gill_spacing

    @property
    def gill_size(self):
        """Gets the gill_size of this Mushroom.


        :return: The gill_size of this Mushroom.
        :rtype: str
        """
        return self._gill_size

    @gill_size.setter
    def gill_size(self, gill_size):
        """Sets the gill_size of this Mushroom.


        :param gill_size: The gill_size of this Mushroom.
        :type gill_size: str
        """
        allowed_values = ["b", "n"]  # noqa: E501
        if gill_size not in allowed_values:
            raise ValueError(
                "Invalid value for `gill_size` ({0}), must be one of {1}"
                .format(gill_size, allowed_values)
            )

        self._gill_size = gill_size

    @property
    def gill_color(self):
        """Gets the gill_color of this Mushroom.


        :return: The gill_color of this Mushroom.
        :rtype: str
        """
        return self._gill_color

    @gill_color.setter
    def gill_color(self, gill_color):
        """Sets the gill_color of this Mushroom.


        :param gill_color: The gill_color of this Mushroom.
        :type gill_color: str
        """
        allowed_values = ["k", "n", "b", "h", "g", "r", "o", "p", "u", "e", "w", "y"]  # noqa: E501
        if gill_color not in allowed_values:
            raise ValueError(
                "Invalid value for `gill_color` ({0}), must be one of {1}"
                .format(gill_color, allowed_values)
            )

        self._gill_color = gill_color

    @property
    def stalk_shape(self):
        """Gets the stalk_shape of this Mushroom.


        :return: The stalk_shape of this Mushroom.
        :rtype: str
        """
        return self._stalk_shape

    @stalk_shape.setter
    def stalk_shape(self, stalk_shape):
        """Sets the stalk_shape of this Mushroom.


        :param stalk_shape: The stalk_shape of this Mushroom.
        :type stalk_shape: str
        """
        allowed_values = ["e", "t"]  # noqa: E501
        if stalk_shape not in allowed_values:
            raise ValueError(
                "Invalid value for `stalk_shape` ({0}), must be one of {1}"
                .format(stalk_shape, allowed_values)
            )

        self._stalk_shape = stalk_shape

    @property
    def stalk_root(self):
        """Gets the stalk_root of this Mushroom.


        :return: The stalk_root of this Mushroom.
        :rtype: str
        """
        return self._stalk_root

    @stalk_root.setter
    def stalk_root(self, stalk_root):
        """Sets the stalk_root of this Mushroom.


        :param stalk_root: The stalk_root of this Mushroom.
        :type stalk_root: str
        """
        allowed_values = ["b", "c", "u", "e", "z", "r", "?"]  # noqa: E501
        if stalk_root not in allowed_values:
            raise ValueError(
                "Invalid value for `stalk_root` ({0}), must be one of {1}"
                .format(stalk_root, allowed_values)
            )

        self._stalk_root = stalk_root

    @property
    def stalk_surface_above_ring(self):
        """Gets the stalk_surface_above_ring of this Mushroom.


        :return: The stalk_surface_above_ring of this Mushroom.
        :rtype: str
        """
        return self._stalk_surface_above_ring

    @stalk_surface_above_ring.setter
    def stalk_surface_above_ring(self, stalk_surface_above_ring):
        """Sets the stalk_surface_above_ring of this Mushroom.


        :param stalk_surface_above_ring: The stalk_surface_above_ring of this Mushroom.
        :type stalk_surface_above_ring: str
        """
        allowed_values = ["f", "y", "k", "s"]  # noqa: E501
        if stalk_surface_above_ring not in allowed_values:
            raise ValueError(
                "Invalid value for `stalk_surface_above_ring` ({0}), must be one of {1}"
                .format(stalk_surface_above_ring, allowed_values)
            )

        self._stalk_surface_above_ring = stalk_surface_above_ring

    @property
    def stalk_surface_below_ring(self):
        """Gets the stalk_surface_below_ring of this Mushroom.


        :return: The stalk_surface_below_ring of this Mushroom.
        :rtype: str
        """
        return self._stalk_surface_below_ring

    @stalk_surface_below_ring.setter
    def stalk_surface_below_ring(self, stalk_surface_below_ring):
        """Sets the stalk_surface_below_ring of this Mushroom.


        :param stalk_surface_below_ring: The stalk_surface_below_ring of this Mushroom.
        :type stalk_surface_below_ring: str
        """
        allowed_values = ["f", "y", "k", "s"]  # noqa: E501
        if stalk_surface_below_ring not in allowed_values:
            raise ValueError(
                "Invalid value for `stalk_surface_below_ring` ({0}), must be one of {1}"
                .format(stalk_surface_below_ring, allowed_values)
            )

        self._stalk_surface_below_ring = stalk_surface_below_ring

    @property
    def stalk_color_above_ring(self):
        """Gets the stalk_color_above_ring of this Mushroom.


        :return: The stalk_color_above_ring of this Mushroom.
        :rtype: str
        """
        return self._stalk_color_above_ring

    @stalk_color_above_ring.setter
    def stalk_color_above_ring(self, stalk_color_above_ring):
        """Sets the stalk_color_above_ring of this Mushroom.


        :param stalk_color_above_ring: The stalk_color_above_ring of this Mushroom.
        :type stalk_color_above_ring: str
        """
        allowed_values = ["n", "b", "c", "g", "o", "p", "e", "w", "y"]  # noqa: E501
        if stalk_color_above_ring not in allowed_values:
            raise ValueError(
                "Invalid value for `stalk_color_above_ring` ({0}), must be one of {1}"
                .format(stalk_color_above_ring, allowed_values)
            )

        self._stalk_color_above_ring = stalk_color_above_ring

    @property
    def stalk_color_below_ring(self):
        """Gets the stalk_color_below_ring of this Mushroom.


        :return: The stalk_color_below_ring of this Mushroom.
        :rtype: str
        """
        return self._stalk_color_below_ring

    @stalk_color_below_ring.setter
    def stalk_color_below_ring(self, stalk_color_below_ring):
        """Sets the stalk_color_below_ring of this Mushroom.


        :param stalk_color_below_ring: The stalk_color_below_ring of this Mushroom.
        :type stalk_color_below_ring: str
        """
        allowed_values = ["n", "b", "c", "g", "o", "p", "e", "w", "y"]  # noqa: E501
        if stalk_color_below_ring not in allowed_values:
            raise ValueError(
                "Invalid value for `stalk_color_below_ring` ({0}), must be one of {1}"
                .format(stalk_color_below_ring, allowed_values)
            )

        self._stalk_color_below_ring = stalk_color_below_ring

    @property
    def veil_type(self):
        """Gets the veil_type of this Mushroom.


        :return: The veil_type of this Mushroom.
        :rtype: str
        """
        return self._veil_type

    @veil_type.setter
    def veil_type(self, veil_type):
        """Sets the veil_type of this Mushroom.


        :param veil_type: The veil_type of this Mushroom.
        :type veil_type: str
        """
        allowed_values = ["p", "u"]  # noqa: E501
        if veil_type not in allowed_values:
            raise ValueError(
                "Invalid value for `veil_type` ({0}), must be one of {1}"
                .format(veil_type, allowed_values)
            )

        self._veil_type = veil_type

    @property
    def veil_color(self):
        """Gets the veil_color of this Mushroom.


        :return: The veil_color of this Mushroom.
        :rtype: str
        """
        return self._veil_color

    @veil_color.setter
    def veil_color(self, veil_color):
        """Sets the veil_color of this Mushroom.


        :param veil_color: The veil_color of this Mushroom.
        :type veil_color: str
        """
        allowed_values = ["n", "o", "w", "y"]  # noqa: E501
        if veil_color not in allowed_values:
            raise ValueError(
                "Invalid value for `veil_color` ({0}), must be one of {1}"
                .format(veil_color, allowed_values)
            )

        self._veil_color = veil_color

    @property
    def ring_number(self):
        """Gets the ring_number of this Mushroom.


        :return: The ring_number of this Mushroom.
        :rtype: str
        """
        return self._ring_number

    @ring_number.setter
    def ring_number(self, ring_number):
        """Sets the ring_number of this Mushroom.


        :param ring_number: The ring_number of this Mushroom.
        :type ring_number: str
        """
        allowed_values = ["n", "o", "t"]  # noqa: E501
        if ring_number not in allowed_values:
            raise ValueError(
                "Invalid value for `ring_number` ({0}), must be one of {1}"
                .format(ring_number, allowed_values)
            )

        self._ring_number = ring_number

    @property
    def ring_type(self):
        """Gets the ring_type of this Mushroom.


        :return: The ring_type of this Mushroom.
        :rtype: str
        """
        return self._ring_type

    @ring_type.setter
    def ring_type(self, ring_type):
        """Sets the ring_type of this Mushroom.


        :param ring_type: The ring_type of this Mushroom.
        :type ring_type: str
        """
        allowed_values = ["c", "e", "f", "l", "n", "p", "s", "z"]  # noqa: E501
        if ring_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ring_type` ({0}), must be one of {1}"
                .format(ring_type, allowed_values)
            )

        self._ring_type = ring_type

    @property
    def spore_print_color(self):
        """Gets the spore_print_color of this Mushroom.


        :return: The spore_print_color of this Mushroom.
        :rtype: str
        """
        return self._spore_print_color

    @spore_print_color.setter
    def spore_print_color(self, spore_print_color):
        """Sets the spore_print_color of this Mushroom.


        :param spore_print_color: The spore_print_color of this Mushroom.
        :type spore_print_color: str
        """
        allowed_values = ["k", "n", "b", "h", "r", "o", "u", "w", "y"]  # noqa: E501
        if spore_print_color not in allowed_values:
            raise ValueError(
                "Invalid value for `spore_print_color` ({0}), must be one of {1}"
                .format(spore_print_color, allowed_values)
            )

        self._spore_print_color = spore_print_color

    @property
    def population(self):
        """Gets the population of this Mushroom.


        :return: The population of this Mushroom.
        :rtype: str
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this Mushroom.


        :param population: The population of this Mushroom.
        :type population: str
        """
        allowed_values = ["a", "c", "n", "s", "v", "y"]  # noqa: E501
        if population not in allowed_values:
            raise ValueError(
                "Invalid value for `population` ({0}), must be one of {1}"
                .format(population, allowed_values)
            )

        self._population = population

    @property
    def habitat(self):
        """Gets the habitat of this Mushroom.


        :return: The habitat of this Mushroom.
        :rtype: str
        """
        return self._habitat

    @habitat.setter
    def habitat(self, habitat):
        """Sets the habitat of this Mushroom.


        :param habitat: The habitat of this Mushroom.
        :type habitat: str
        """
        allowed_values = ["g", "l", "m", "p", "u", "w", "d"]  # noqa: E501
        if habitat not in allowed_values:
            raise ValueError(
                "Invalid value for `habitat` ({0}), must be one of {1}"
                .format(habitat, allowed_values)
            )

        self._habitat = habitat

   