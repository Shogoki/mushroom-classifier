# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UnexpectedError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errorcode=None, errormessage=None):  # noqa: E501
        """UnexpectedError - a model defined in OpenAPI

        :param errorcode: The errorcode of this UnexpectedError.  # noqa: E501
        :type errorcode: int
        :param errormessage: The errormessage of this UnexpectedError.  # noqa: E501
        :type errormessage: str
        """
        self.openapi_types = {
            'errorcode': int,
            'errormessage': str
        }

        self.attribute_map = {
            'errorcode': 'errorcode',
            'errormessage': 'errormessage'
        }

        self._errorcode = errorcode
        self._errormessage = errormessage

    @classmethod
    def from_dict(cls, dikt)  -> 'UnexpectedError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnexpectedError of this UnexpectedError.  # noqa: E501
        :rtype: UnexpectedError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errorcode(self):
        """Gets the errorcode of this UnexpectedError.


        :return: The errorcode of this UnexpectedError.
        :rtype: int
        """
        return self._errorcode

    @errorcode.setter
    def errorcode(self, errorcode):
        """Sets the errorcode of this UnexpectedError.


        :param errorcode: The errorcode of this UnexpectedError.
        :type errorcode: int
        """
        if errorcode is None:
            raise ValueError("Invalid value for `errorcode`, must not be `None`")  # noqa: E501

        self._errorcode = errorcode

    @property
    def errormessage(self):
        """Gets the errormessage of this UnexpectedError.


        :return: The errormessage of this UnexpectedError.
        :rtype: str
        """
        return self._errormessage

    @errormessage.setter
    def errormessage(self, errormessage):
        """Sets the errormessage of this UnexpectedError.


        :param errormessage: The errormessage of this UnexpectedError.
        :type errormessage: str
        """
        if errormessage is None:
            raise ValueError("Invalid value for `errormessage`, must not be `None`")  # noqa: E501

        self._errormessage = errormessage
