{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/enum2array.pipe.ts","webpack:///./src/app/mushroom-history/mushroom-history.component.css","webpack:///./src/app/mushroom-history/mushroom-history.component.html","webpack:///./src/app/mushroom-history/mushroom-history.component.ts","webpack:///./src/app/mushroom-prediction/mushroom-prediction-dialog.html","webpack:///./src/app/mushroom-prediction/mushroom-prediction.component.css","webpack:///./src/app/mushroom-prediction/mushroom-prediction.component.html","webpack:///./src/app/mushroom-prediction/mushroom-prediction.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to the {{ title }}!\\n  </h1>\\n</div>\\n\\n<!--<button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\n    <mat-icon>more_vert</mat-icon>\\n  </button>\\n  <mat-menu #menu=\\\"matMenu\\\">\\n    <button mat-menu-item>\\n      <mat-icon>dialpad</mat-icon>\\n      <span>Redial</span>\\n    </button>\\n    <button mat-menu-item disabled>\\n      <mat-icon>voicemail</mat-icon>\\n      <span>Check voicemail</span>\\n    </button>\\n    <button mat-menu-item>\\n      <mat-icon>notifications_off</mat-icon>\\n      <span>Disable alerts</span>\\n    </button>\\n  </mat-menu>\\n  -->\\n\\n \\n      <app-mushroom-prediction></app-mushroom-prediction>\\n    \\n\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Mushroom Checker';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, ANALYZE_FOR_ENTRY_COMPONENTS } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\n\n//Importing APi client\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ApiModule, BASE_PATH } from '@skraus/mushroom-api-client';\nimport { environment } from '../environments/environment';\nimport { MushroomPredictionComponent, MushroomPredictionDialog } from './mushroom-prediction/mushroom-prediction.component';\n\n//Angular Material\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatSelectModule,  MatAutocompleteModule, MatFormFieldModule, MatInputModule, MatOptionModule, MatButtonModule,  MatMenuModule, MatIconModule, MatDialogModule, MatProgressSpinnerModule, MatTableModule, MatListModule, MatExpansionModule, MatGridListModule, MatSnackBar, MatSnackBarModule} from '@angular/material';\nimport { Enum2arrayPipe } from './enum2array.pipe';\n\n//Angluar Flex\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MushroomHistoryComponent } from './mushroom-history/mushroom-history.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MushroomPredictionComponent,\n    Enum2arrayPipe,\n    MushroomPredictionDialog,\n    MushroomHistoryComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ApiModule,\n    BrowserAnimationsModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatOptionModule,\n    MatSnackBarModule,\n    FormsModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatListModule,\n    MatExpansionModule,\n    MatGridListModule\n  ],\n  providers: [{ provide: BASE_PATH, useValue: environment.API_BASE_PATH }/*,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpErrorInterceptor,\n      multi: true\n    }*/],\n  bootstrap: [AppComponent],\n  entryComponents: [\n   MushroomPredictionDialog\n  ]\n})\nexport class AppModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'enum2array'\n})\nexport class Enum2arrayPipe implements PipeTransform {\n\n  transform(data: Object) {\n    return Object.keys(data);\n  }\n  \n\n}\n","module.exports = \"\\n@media screen and (max-width: 1280px) {\\n    .mat-table {\\n      border: 0;\\n      vertical-align: middle\\n    }\\n  \\n    .mat-table caption {\\n      font-size: 1em;\\n    }\\n    \\n   \\n    .mat-table .mat-header-cell {\\n      \\n      border: 10px solid;\\n      clip: rect(0 0 0 0);\\n      height: 1px;\\n      margin: -1px;\\n      padding: 0;\\n      position: absolute;\\n      width: 1px;\\n    }\\n    \\n    .mat-table .mat-row {\\n      border-bottom: 5px solid #ddd;\\n      display: block;\\n    }\\n   \\n    .mat-table .mat-row:nth-child(even) {background: #CCC}\\n    .mat-table .mat-row:nth-child(odd) {background: #FFF}\\n    .mat-cell, .mat-header-cell {\\n        overflow: hidden;\\n        word-wrap: break-word;\\n      }\\n    .mat-table .mat-cell {\\n      border-bottom: 1px solid #ddd;\\n      display: block;\\n      font-size: .9em;\\n      text-align: right;\\n      font-weight: bold;\\n      height:30px;\\n      margin-bottom: 4%;\\n      \\n    }\\n    .mat-table .mat-cell:before {\\n      /*\\n      * aria-label has no advantage, it won't be read inside a table\\n      content: attr(aria-label);\\n      */\\n      content: attr(id);\\n      float: left;\\n      text-transform: uppercase;\\n      font-weight: normal;\\n      \\n      font-size: .85em;\\n    }\\n    .mat-table .mat-cell:last-child {\\n      border-bottom: 0;\\n    }\\n      .mat-table .mat-cell:first-child {\\n      margin-top: 4%;\\n    }\\n  }\\n\\n  \\n\\n  .mat-table {\\n    overflow: scroll;\\n    word-wrap: break-word;\\n    max-width: 1280px;\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbXVzaHJvb20taGlzdG9yeS9tdXNocm9vbS1oaXN0b3J5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0k7TUFDRSxVQUFVO01BQ1Ysc0JBQXNCO0tBQ3ZCOztJQUVEO01BQ0UsZUFBZTtLQUNoQjs7O0lBR0Q7O01BRUUsbUJBQW1CO01BQ25CLG9CQUFvQjtNQUNwQixZQUFZO01BQ1osYUFBYTtNQUNiLFdBQVc7TUFDWCxtQkFBbUI7TUFDbkIsV0FBVztLQUNaOztJQUVEO01BQ0UsOEJBQThCO01BQzlCLGVBQWU7S0FDaEI7O0lBRUQscUNBQXFDLGdCQUFnQixDQUFDO0lBQ3RELG9DQUFvQyxnQkFBZ0IsQ0FBQztJQUNyRDtRQUNJLGlCQUFpQjtRQUNqQixzQkFBc0I7T0FDdkI7SUFDSDtNQUNFLDhCQUE4QjtNQUM5QixlQUFlO01BQ2YsZ0JBQWdCO01BQ2hCLGtCQUFrQjtNQUNsQixrQkFBa0I7TUFDbEIsWUFBWTtNQUNaLGtCQUFrQjs7S0FFbkI7SUFDRDtNQUNFOzs7UUFHRTtNQUNGLGtCQUFrQjtNQUNsQixZQUFZO01BQ1osMEJBQTBCO01BQzFCLG9CQUFvQjs7TUFFcEIsaUJBQWlCO0tBQ2xCO0lBQ0Q7TUFDRSxpQkFBaUI7S0FDbEI7TUFDQztNQUNBLGVBQWU7S0FDaEI7R0FDRjs7OztFQUlEO0lBQ0UsaUJBQWlCO0lBQ2pCLHNCQUFzQjtJQUN0QixrQkFBa0I7R0FDbkIiLCJmaWxlIjoic3JjL2FwcC9tdXNocm9vbS1oaXN0b3J5L211c2hyb29tLWhpc3RvcnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI4MHB4KSB7XG4gICAgLm1hdC10YWJsZSB7XG4gICAgICBib3JkZXI6IDA7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlXG4gICAgfVxuICBcbiAgICAubWF0LXRhYmxlIGNhcHRpb24ge1xuICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgfVxuICAgIFxuICAgXG4gICAgLm1hdC10YWJsZSAubWF0LWhlYWRlci1jZWxsIHtcbiAgICAgIFxuICAgICAgYm9yZGVyOiAxMHB4IHNvbGlkO1xuICAgICAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgICAgIGhlaWdodDogMXB4O1xuICAgICAgbWFyZ2luOiAtMXB4O1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHdpZHRoOiAxcHg7XG4gICAgfVxuICAgIFxuICAgIC5tYXQtdGFibGUgLm1hdC1yb3cge1xuICAgICAgYm9yZGVyLWJvdHRvbTogNXB4IHNvbGlkICNkZGQ7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gICBcbiAgICAubWF0LXRhYmxlIC5tYXQtcm93Om50aC1jaGlsZChldmVuKSB7YmFja2dyb3VuZDogI0NDQ31cbiAgICAubWF0LXRhYmxlIC5tYXQtcm93Om50aC1jaGlsZChvZGQpIHtiYWNrZ3JvdW5kOiAjRkZGfVxuICAgIC5tYXQtY2VsbCwgLm1hdC1oZWFkZXItY2VsbCB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICAgIH1cbiAgICAubWF0LXRhYmxlIC5tYXQtY2VsbCB7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgZm9udC1zaXplOiAuOWVtO1xuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIGhlaWdodDozMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogNCU7XG4gICAgICBcbiAgICB9XG4gICAgLm1hdC10YWJsZSAubWF0LWNlbGw6YmVmb3JlIHtcbiAgICAgIC8qXG4gICAgICAqIGFyaWEtbGFiZWwgaGFzIG5vIGFkdmFudGFnZSwgaXQgd29uJ3QgYmUgcmVhZCBpbnNpZGUgYSB0YWJsZVxuICAgICAgY29udGVudDogYXR0cihhcmlhLWxhYmVsKTtcbiAgICAgICovXG4gICAgICBjb250ZW50OiBhdHRyKGlkKTtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICBcbiAgICAgIGZvbnQtc2l6ZTogLjg1ZW07XG4gICAgfVxuICAgIC5tYXQtdGFibGUgLm1hdC1jZWxsOmxhc3QtY2hpbGQge1xuICAgICAgYm9yZGVyLWJvdHRvbTogMDtcbiAgICB9XG4gICAgICAubWF0LXRhYmxlIC5tYXQtY2VsbDpmaXJzdC1jaGlsZCB7XG4gICAgICBtYXJnaW4tdG9wOiA0JTtcbiAgICB9XG4gIH1cblxuICBcblxuICAubWF0LXRhYmxlIHtcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBtYXgtd2lkdGg6IDEyODBweDtcbiAgfSJdfQ== */\"","module.exports = \"\\n<!--<div *ngFor=\\\"let item of object | keyvalue\\\">\\n    {{item.key}}:{{item.value}}\\n  </div>\\n-->\\n<!--\\n{{test}}\\n<input [(ngModel)]=\\\"test\\\">\\n  <mat-table [dataSource]=\\\"mushrooms\\\" class=\\\"mat-table\\\">\\n\\n       Note that these columns can be defined in any order.\\n            The actual rendered columns are set as a property on the row definition\\\"\\n    \\n\\n    <ng-container *ngFor=\\\"let col of displayedColumns\\\" matColumnDef=\\\"{{col}}\\\">\\n        <mat-header-cell mat-header-cell *matHeaderCellDef> {{col}} </mat-header-cell>\\n        <mat-cell id=\\\"{{col}}\\\" *matCellDef=\\\"let element\\\"  > {{getEnumMember(col,element[col])}} </mat-cell>\\n      </ng-container>      \\n      \\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n  </mat-table>\\n    \\n-->\\n\\n<mat-accordion>\\n \\n    <mat-expansion-panel *ngFor=\\\"let mushroom of mushrooms\\\" >\\n      <mat-expansion-panel-header>\\n        <mat-panel-title>\\n         Mushroom was probably {{getEnumMember(\\\"class\\\",mushroom.class)}}\\n        </mat-panel-title>\\n        <mat-panel-description>\\n         Open to view Details\\n        </mat-panel-description>\\n      </mat-expansion-panel-header>\\n      <mat-list>\\n          <mat-list-item *ngFor=\\\"let col of displayedColumns\\\" role=\\\"listitem\\\">{{col}}: {{getEnumMember(col,mushroom[col])}}</mat-list-item>\\n      </mat-list>\\n    </mat-expansion-panel>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Mushroom, MushroomService, _Mushroom } from '@skraus/mushroom-api-client';\n\n\nconst ELEMENT_DATA = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n];\n\n@Component({\n  selector: 'app-mushroom-history',\n  templateUrl: './mushroom-history.component.html',\n  styleUrls: ['./mushroom-history.component.css']\n})\nexport class MushroomHistoryComponent implements OnInit {\n\n  constructor(private mushroomService: MushroomService) {\n    \n   }\n\n  ngOnInit() {\n    this.getHistory()\n    this.mushrooms[0]\n    \n  \n    \n  }\n  \n \n  getEnumMember(propertyName: string, value) {\n\n    \n   //Converting property Name to Enum Name\n    var enumName = propertyName.replace(/(\\-\\w)/g, function(m){return m[1].toUpperCase();});\n    enumName = enumName.charAt(0).toUpperCase() + enumName.slice(1) + \"Enum\"\n    console.log(\"enum Name = \" +enumName)\n    for(let key of Object.keys(_Mushroom[enumName])){\n     \n      if(_Mushroom[enumName][key] == value){\n\n        console.log(\"Found Key\" +key )\n        return key;\n      }\n    }\n    \n    // Object.keys(_Mushroom['BruisesEnum'])[0]\n  }\n\n  getHistory() {\n    this.isLoading = true\n       \n    this.mushroomService.getHistory().subscribe(mushrooms => {\n      this.mushrooms = mushrooms\n      this.isLoading = false\n      this.displayedColumns = Object.keys(this.mushrooms[0])\n      })\n  }\n  test: string = this.getEnumMember('bruises',\"f\")\n  mushrooms: Mushroom[]\n  isLoading: boolean\n  displayedColumns: string[] \n  \n\n}\n","module.exports = \"<h1 mat-dialog-title>Hi User</h1>\\n<div mat-dialog-content>\\n  <p>Your mushroom is probably {{mushroom}}</p>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button cdkFocusInitial (click)=\\\"onClick()\\\">Ok, Thank you.</button>\\n</div>\\n\\n\"","module.exports = \".container {\\n    min-height: 100%;\\n    width: 100%;\\n  }\\n\\n  h3 {\\n      text-align: center;\\n  }\\n\\n  .overlay {\\n      position: fixed;\\n      top: 45%;\\n    left: 45%;\\n   \\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbXVzaHJvb20tcHJlZGljdGlvbi9tdXNocm9vbS1wcmVkaWN0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsWUFBWTtHQUNiOztFQUVEO01BQ0ksbUJBQW1CO0dBQ3RCOztFQUVEO01BQ0ksZ0JBQWdCO01BQ2hCLFNBQVM7SUFDWCxVQUFVOztHQUVYIiwiZmlsZSI6InNyYy9hcHAvbXVzaHJvb20tcHJlZGljdGlvbi9tdXNocm9vbS1wcmVkaWN0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcbiAgICBtaW4taGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgaDMge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgLm92ZXJsYXkge1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgdG9wOiA0NSU7XG4gICAgbGVmdDogNDUlO1xuICAgXG4gIH0iXX0= */\"","module.exports = \"\\n<mat-spinner class=\\\"overlay\\\" *ngIf=\\\"isLoading\\\"></mat-spinner>\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\">\\n   \\n    <span fxFlex=\\\"0 1 90%\\\">\\n<h3>Please describe your mushroom to find out if it is safe to eat</h3>\\n<!--<mat-form-field>\\n<mat-select placeholder=\\\"test\\\"><mat-option value=\\\"test\\\">test</mat-option></mat-select>\\n</mat-form-field>\\n-->\\n\\n<div class=\\\"container\\\" fxLayout=\\\"column\\\" fxLayoutWrap fxLayoutAlign=\\\"center\\\" >\\n<div class=\\\"container\\\" fxLayout=\\\"row wrap\\\" fxLayout.xs=\\\"column\\\" fxLayoutWrap fxLayoutGap=\\\"15px\\\" fxLayoutAlign=\\\"center\\\">\\n\\n<mat-form-field *ngFor=\\\"let feature of MushroomFeatures\\\" fxFlex=\\\"0 1 calc(25% - 15px)\\\"  fxFlex.lt-md=\\\"0 1 calc(50% - 15px)\\\"\\nfxFlex.lt-sm=\\\"100%\\\">\\n \\n\\n  <!----  <label>{{feature.name}}: </label><select matNativeControl  [(ngModel)]=\\\"feature.value\\\" >-->\\n      <mat-select class=\\\"form-control\\\" placeholder=\\\"{{feature.name}}\\\" [(value)]=\\\"feature.value\\\" required>\\n    \\n        <mat-option  *ngFor=\\\"let opt of getValues(feature.Enum)\\\" value=\\\"{{feature.Enum[opt]}}\\\">{{opt}}</mat-option>\\n\\n      </mat-select>\\n      \\n    \\n  <!--</select>-->\\n</mat-form-field>\\n</div>\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"getPrediction()\\\">Can I eat it?</button>\\n<h3>Previous Mushroom Classifications:</h3>\\n<app-mushroom-history></app-mushroom-history>\\n</div>\\n\\n\\n</span>\\n    </div>\\n<!---\\n<input [ngModel]=\\\"mushroom['class']\\\" />\\n<div *ngFor=\\\"let feature of MushroomFeatures\\\">\\n  {{mushroom[feature.name]}}\\n</div>-->\\n<!--\\n<mat-select placeholder=\\\"{{feature.name}}\\\" [(value)]=\\\"mushroom[feature.name]\\\">\\n<mat-option *ngFor=\\\"let opt of Object.keys(feature.Enum)\\\" value=\\\"feature.Enum[opt]\\\" >opt</mat-option>\\n</mat-select>\\n\\n-->\\n <!----<mat-select placeholder=\\\"cap shape\\\" [(value)]=\\\"capShape\\\"> \\n  <mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\"> \\n    {{food.viewValue}}\\n  </mat-option> --\\n  <mat-option value=\\\"b\\\" >bell</mat-option>\\n  <mat-option value=\\\"c\\\" >canonic</mat-option>\\n</mat-select> -->\\n\\n<!--/*//TODO: MAT select // CORS //RESULT Display (Autocomplete with validation?) MessageService?-->\"","import { Component, OnInit, Inject } from '@angular/core';\nimport {Mushroom, _Mushroom} from '@skraus/mushroom-api-client/'\nimport {MushroomService} from '@skraus/mushroom-api-client/'\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA, MatSnackBar} from '@angular/material';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n\n\n\n@Component({\n  selector: 'app-mushroom-prediction',\n  templateUrl: './mushroom-prediction.component.html',\n  styleUrls: ['./mushroom-prediction.component.css']\n})\nexport class MushroomPredictionComponent implements OnInit {\n\n  constructor(private mushroomService: MushroomService, private dialog: MatDialog, private snackBar: MatSnackBar) { \n    this.mushroom = new Mushroom();\n  }\n \n  mushroom: Mushroom\n  isLoading: Boolean\n  MushroomFeatures \n  ngOnInit() {\n    /*this.mushroom = {\"capShape\": _Mushroom.CapShapeEnum.Bell}*/\n  \n    this.MushroomFeatures = [\n      {\n        name: \"cap-shape\",\n        Enum: _Mushroom.CapShapeEnum,\n        value: \"\" \n        },\n        {\n        name: \"cap-surface\",\n        Enum: _Mushroom.CapSurfaceEnum     ,\n        value: \"\"},\n        {\n        name: \"cap-color\",\n        Enum: _Mushroom.CapColorEnum     ,\n        value: \"\"},\n        {\n        name: \"bruises\",\n        Enum: _Mushroom.BruisesEnum     ,\n        value: \"\"},\n        {\n        name: \"odor\",\n        Enum: _Mushroom.OdorEnum     ,\n        value: \"\"},\n        {\n        name: \"gill-attachment\",\n        Enum: _Mushroom.GillAttachmentEnum     ,\n        value: \"\"},\n        {\n        name: \"gill-spacing\",\n        Enum: _Mushroom.GillSpacingEnum    ,\n        value: \"\"},\n        {\n        name: \"gill-size\",\n        Enum: _Mushroom.GillSizeEnum     ,\n        value: \"\"},\n        {\n        name: \"gill-color\",\n        Enum: _Mushroom.GillColorEnum     ,\n        value: \"\"},\n        {\n      name: \"stalk-shape\",\n      Enum: _Mushroom.StalkShapeEnum     ,\n      value: \"\"},\n      {\n    name: \"stalk-root\",\n    Enum: _Mushroom.StalkRootEnum     ,\n    value: \"\"},\n    {\n    name: \"stalk-surface-above-ring\",\n    Enum: _Mushroom.StalkSurfaceAboveRingEnum     ,\n    value: \"\"},\n    {\n      name: \"stalk-surface-below-ring\",\n      Enum: _Mushroom.StalkSurfaceBelowRingEnum    ,\n      value: \"\"},\n        {\n      name: \"stalk-color-above-ring\",\n      Enum: _Mushroom.StalkColorAboveRingEnum     ,\n      value: \"\"},\n      {\n        name: \"stalk-color-below-ring\",\n        Enum: _Mushroom.StalkColorBelowRingEnum     ,\n        value: \"\"},\n        {\n          name: \"veil-type\",\n          Enum: _Mushroom.VeilTypeEnum     ,\n          value: \"\"},\n          {\n            name: \"veil-color\",\n            Enum: _Mushroom.VeilColorEnum     ,\n            value: \"\"},\n            {\n              name: \"ring-number\",\n              Enum: _Mushroom.RingNumberEnum    ,\n              value: \"\"},\n              {\n                name: \"ring-type\",\n                Enum: _Mushroom.RingTypeEnum     ,\n                value: \"\"},\n                {\n                  name: \"spore-print-color\",\n                  Enum: _Mushroom.SporePrintColorEnum    ,\n                  value: \"\"},\n                  {\n                    name: \"population\",\n                    Enum: _Mushroom.PopulationEnum     ,\n                    value: \"\"},\n                    {\n                      name: \"habitat\",\n                      Enum: _Mushroom.HabitatEnum     ,\n                      value: \"\"}\n    \n                                                  \n        \n      ]\n\n  }\n  getValues(featureEnum)\n  {\n    return   Object.keys(featureEnum)\n  }\n  \n  \n\n  getPrediction() : void{\n    this.isLoading = true\n    this.mushroom = new Mushroom()\n    for(let feature of this.MushroomFeatures) {\n      this.mushroom[feature.name] = feature.value\n    }\n    this.mushroomService.predict(this.mushroom).pipe(catchError((error) => {\n        console.error('error getting Mushroom prediction', error);\n        this.isLoading = false\n        let errMsg = (error.message) ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        this.openSnackBar(errMsg,\"OK\")\n        return Observable.throw(error);\n      })\n    ).subscribe(mushroom => {\n      this.mushroom = mushroom\n      this.isLoading = false\n      this.openDialog()\n      }\n      )\n     \n  }\n\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n\n  openDialog(): void {\n   \n    const dialogRef = this.dialog.open(MushroomPredictionDialog, {\n      width: '250px',\n      \n      data:  this.mushroom.class == 'e' ? 'eatable': 'posionous'\n    });\n    }\n}\n\n@Component({\n  selector: 'mushroom-prediction-dialog',\n  templateUrl: 'mushroom-prediction-dialog.html',\n})\nexport class MushroomPredictionDialog {\n  \n  displayClass: string\n  constructor(\n    public dialogRef: MatDialogRef<MushroomPredictionDialog>,\n    @Inject(MAT_DIALOG_DATA) public mushroom: string) {\n     \n    }\n\n  onClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  API_BASE_PATH: 'http://localhost:8080/v1'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}